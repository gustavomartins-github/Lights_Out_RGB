(define (problem luz)
	(:domain lightsout)
	(:objects
		0x0 0x1 0x2 0x3 1x0 1x1 1x2 1x3 2x0 2x1 2x2 2x3 3x0 3x1 3x2 3x3 - cell
		- * _ | # - type
		W R G B - color
	)
	(:init
		(cor R 0x0)
		(cor W 0x1)
		(cor W 0x2)
		(cor W 0x3)
		(cor G 1x0)
		(cor B 1x1)
		(cor R 1x2)
		(cor W 1x3)
		(cor W 2x0)
		(cor W 2x1)
		(cor W 2x2)
		(cor W 2x3)
		(cor W 3x0)
		(cor W 3x1)
		(cor W 3x2)
		(cor W 3x3)
		(tipo * 0x0)
		(tipo - 0x1)
		(tipo - 0x2)
		(tipo - 0x3)
		(tipo - 1x0)
		(tipo | 1x1)
		(tipo - 1x2)
		(tipo - 1x3)
		(tipo - 2x0)
		(tipo - 2x1)
		(tipo _ 2x2)
		(tipo - 2x3)
		(tipo - 3x0)
		(tipo - 3x1)
		(tipo - 3x2)
		(tipo # 3x3)
		(adj 0x0 0x1)
		(adj 0x0 1x0)
		(adj 0x1 0x2)
		(adj 0x1 1x1)
		(adj 0x2 0x3)
		(adj 0x2 1x2)
		(adj 0x3 0x4)
		(adj 0x3 1x3)
		(adj 1x0 1x1)
		(adj 1x0 2x0)
		(adj 1x1 1x2)
		(adj 1x1 2x1)
		(adj 1x2 1x3)
		(adj 1x2 2x2)
		(adj 1x3 1x4)
		(adj 1x3 2x3)
		(adj 2x0 2x1)
		(adj 2x0 3x0)
		(adj 2x1 2x2)
		(adj 2x1 3x1)
		(adj 2x2 2x3)
		(adj 2x2 3x2)
		(adj 2x3 2x4)
		(adj 2x3 3x3)
		(adj 3x0 3x1)
		(adj 3x1 3x2)
		(adj 3x2 3x3)
		(adj 3x3 3x4)
	)
	(:goal
		(and
			(cor W 0x0)
			(cor W 0x1)
			(cor W 0x2)
			(cor W 0x3)
			(cor W 1x0)
			(cor W 1x1)
			(cor W 1x2)
			(cor W 1x3)
			(cor W 2x0)
			(cor W 2x1)
			(cor W 2x2)
			(cor W 2x3)
			(cor W 3x0)
			(cor W 3x1)
			(cor W 3x2)
			(cor W 3x3)
		)
	)
)
